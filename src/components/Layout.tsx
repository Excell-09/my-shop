import Head from 'next/head';
import { ReactNode, useEffect, useState } from 'react';
import Navbar from './Navbar';
import MobileNavbar from './MobileNavbar';
import axiosFetch from '@/utils/axiosCreate';
import logoutUser from '@/utils/logoutUser';
import { useAppDispatch, useAppSelector } from '@/app/hooks';
import { clearUser, setUser } from '@/slice/userSlice';
import { useRouter } from 'next/router';
import LoadingBig from './LoadingBig';
import { getCache, setCache } from '@/utils/cache';

type Props = {
  children: ReactNode;
};

const Layout = ({ children }: Props) => {
  const router = useRouter();
  const dispatch = useAppDispatch();
  const [loading, isLoading] = useState(true);
  const cacheKey = 'userCacheKey';
  const getCurrentUser = async () => {
    isLoading(true);
    try {
      const { data } = await axiosFetch('/auth/getCurrentUser', { withCredentials: true });
      const { user } = data;
      dispatch(setUser({ user }));
      if (router.pathname === '/login' || router.pathname === '/register') {
        router.push('/');
      }
      setCache(cacheKey, user);
    } catch (error: any) {
      if (error?.response?.status === 401) return;
    }
    isLoading(false);
  };

  useEffect(() => {
    const cachedData = getCache(cacheKey);
    if (cachedData) {
      isLoading(false);
      return;
    }
    getCurrentUser();
  }, []);

  axiosFetch.interceptors.response.use(
    (response) => {
      return response;
    },
    (error) => {
      if (error?.response?.status === 401) {
        dispatch(clearUser({}));
        logoutUser();
        return;
      }
      return Promise.reject(error);
    }
  );

  return (
    <>
      <Head>
        <title>Myshop</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <header>
        <Navbar />
        <MobileNavbar />
      </header>
      <main className='pt-16'>{loading ? <LoadingBig /> : children}</main>
      <footer>&copy; My App</footer>
    </>
  );
};

export default Layout;
